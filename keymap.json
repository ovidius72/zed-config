[
  // {
  //   "context": "Workspace",
  //   "bindings": {
  //   }
  // },
  {
    "context": "(vim_mode == normal || vim_mode == visual || vim_mode == waiting) && multibuffer",
    "bindings": {
      "[ e": "editor::MoveToEndOfPreviousExcerpt",
      "] e": "editor::MoveToStartOfNextExcerpt",
      "] f": "search::SelectNextMatch",
      "[ f": "search::SelectPreviousMatch",
      "space shift-y": ["workspace::SendKeystrokes", "\" 0 p"],
      "enter": "vim::SearchSubmit",
      "escape": "buffer_search::Dismiss"
    }
  },
  {
    // APPLY TO ALL CONTEXTS
    "bindings": {
      // "ctrl-r": "editor::ShowWordCompletions",
      "alt-i": "editor::ShowSignatureHelp",
      // "ctrl-c": "vim::SwitchToNormalMode",
      "cmd-]": "pane::ActivateNextItem",
      "ctrl-c": "menu::Cancel",
      "cmd-[": "pane::ActivatePreviousItem",
      "ctrl-k": "menu::SelectPrevious",
      "ctrl-j": "menu::SelectNext",
      "ctrl-;": "terminal_panel::ToggleFocus",
      "ctrl-/": "vim::ToggleRegistersView",
      "ctrl-alt-p": "editor::MoveToEndOfPreviousExcerpt",
      "ctrl-alt-n": "editor::MoveToStartOfNextExcerpt",
      "ctrl-shift-1": ["workspace::MoveItemToPane", { "destination": 0 }],
      "ctrl-shift-2": [
        "workspace::MoveItemToPane",
        { "destination": 1, "focus": false }
      ],
      "alt-shift-h": [
        "workspace::MoveItemToPaneInDirection",
        { "direction": "left" }
      ],
      "alt-shift-l": [
        "workspace::MoveItemToPaneInDirection",
        { "direction": "right" }
      ],
      "alt-shift-k": [
        "workspace::MoveItemToPaneInDirection",
        { "direction": "up" }
      ],
      "alt-shift-j": [
        "workspace::MoveItemToPaneInDirection",
        { "direction": "down" }
      ],
      "ctrl-alt-shift-h": [
        "workspace::MoveItemToPaneInDirection",
        { "direction": "left" }
      ],
      "ctrl-alt-shift-l": [
        "workspace::MoveItemToPaneInDirection",
        { "direction": "right" }
      ],
      "ctrl-alt-shift-k": [
        "workspace::MoveItemToPaneInDirection",
        { "direction": "up" }
      ],
      "ctrl-alt-shift-j": [
        "workspace::MoveItemToPaneInDirection",
        { "direction": "down" }
      ]
    }
  },
  {
    "context": "Excerpts",
    "bindings": {
      // "ctrl-p": "editor::SelectToEndOfPreviousExcerpt",
      // "ctrl-n": "editor::SelectToStartOfNextExcerpt"
    }
  },
  {
    "context": "Editor && vim_mode == insert",
    "bindings": {
      "j j": "vim::NormalBefore",
      "ctrl-f": "editor::AcceptPartialCopilotSuggestion",
      "alt-[": "copilot::NextSuggestion",
      "alt-]": "copilot::PreviousSuggestion",
      "alt-cmd-j": "editor::AddSelectionBelow",
      "alt-cmd-k": "editor::AddSelectionAbove"
    }
  },
  {
    "context": "Terminal",
    "bindings": {
      "ctrl-,": "workspace::NewTerminal",
      "alt-right": "vim::ResizePaneRight",
      "alt-left": "vim::ResizePaneLeft",
      "alt-down": "vim::ResizePaneDown",
      "alt-up": "vim::ResizePaneUp",
      "ctrl-;": "terminal_panel::ToggleFocus",
      "ctrl-c": ["terminal::SendKeystroke", "ctrl-c"],
      "ctrl-'": "workspace::ToggleBottomDock",
      "ctrl-]": "workspace::ToggleRightDock",
      "ctrl-.": "workspace::ToggleZoom",
      "alt-q": "pane::CloseActiveItem",
      "alt-l": "workspace::ActivatePaneRight",
      "alt-k": "workspace::ActivatePaneUp",
      "alt-j": "workspace::ActivatePaneDown",
      "alt-h": "workspace::ActivatePaneLeft",
      "alt-s": "pane::SplitHorizontal",
      "alt-v": "pane::SplitVertical",
      "cmd-alt-k": "pane::SplitUp",
      "cmd-alt-j": "pane::SplitDown",
      "cmd-alt-h": "pane::SplitLeft",
      "cmd-alt-l": "pane::SplitRight"
      // "ctrl-/": ["workspace::SendKeystrokes", "alt-q ctrl-;"]
    }
  },
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "h": "project_panel::CollapseSelectedEntry",
      "space ]": "project_panel::ToggleFocus",
      "ctrl-l": "project_panel::ToggleFocus",
      "space [": "workspace::ToggleLeftDock",
      "ctrl-alt-[": "workspace::ToggleLeftDock",
      "ctrl-[": "project_panel::ToggleFocus",
      // "l": "project_panel::ExpandSelectedEntry",
      "ctrl-k": "editor::MoveUp",
      "ctrl-j": "editor::MoveDown",
      "l": "project_panel::Open",
      "escape": "project_panel::ToggleFocus",
      "enter": "project_panel::Open",
      "d": "project_panel::NewDirectory",
      "a": "project_panel::NewFile",
      "shift-r": "project_panel::Rename",
      // These operate differently (which is fine) than in vim in that "marking"
      // the "target" always comes last. So you would do "m m" to mark the file
      // you want to move, then "m t" again to mark the target directory.
      // Copying is the same, with "m c" to mark the file to copy, then "m t"
      // to mark the target directory.
      "m x": "project_panel::Cut",
      "m c": "project_panel::Copy",
      "m p": "project_panel::Paste",
      // Open in finder
      "o": "editor::RevealInFileManager",
      // Directory expansion
      // "l": "project_panel::ExpandSelectedEntry",
      // Move up and down
      // "j": "menu::SelectNext",
      // "k": "menu::SelectPrev",
      //////////////////////////////////////////////////////////
      // COMMANDS THAT ARE IN ZED, BUT DON'T WORK JUST RIGHT
      //////////////////////////////////////////////////////////
      // After deletion of the last file in a directory we should stay inside
      // the current directory, but instead it jumps to the root of the project.
      "shift-d": "project_panel::Delete",
      "r": "project_panel::Delete",
      // Works when the current selection in the project panel is a directory.
      // I think this should also work when the current selection is a file
      // on whichever directory that file is in.
      "/": "project_panel::NewSearchInDirectory",
      //////////////////////////////////////////////////////////
      // COMMANDS THAT ARE NOT IN ZED, BUT WISH THEY WERE
      //////////////////////////////////////////////////////////
      // Typically this is used to go up a directory. There is no command to
      // go up a directory in Zed though.
      // "-": "project_panel::GoUpOneDirectory",
      // This is not a thing in Zed at the moment. If it was it would display
      // the file preview in the current pane, but would keep the focus on the
      // project panel. Moving off that previewed file would close the preview.
      // "p": "project_panel::Preview",
      //////////////////////////////////////////////////////////
      // ZED-SPECIFIC COMMANDS
      //////////////////////////////////////////////////////////
      // In vim "q f" displays information on a file so tucking these under "q".
      // Perhaps a different command makes more sense though.
      "q p": "workspace::CopyPath",
      "q r": "workspace::CopyRelativePath"
    }
  },
  {
    "context": "Editor && vim_mode == visual && !VimWaiting && !VimObject",
    "bindings": {
      "shift-s": ["vim::PushAddSurrounds", {}]
    }
  },
  {
    "context": "vim_mode == normal || vim_mode == visual && !multibuffer",
    "bindings": {
      "ctrl-n": ["vim::PushSneak", {}],
      "ctrl-s": ["vim::PushSneakBackward", {}]
    }
  },
  {
    "context": "VimControl && !menu",
    "bindings": {
      "*": ["vim::MoveToNext", { "case_sensitive": true }],
      "#": ["vim::MoveToPrevious", { "case_sensitive": true }]
    }
  },
  {
    "context": "AssistantPanel || AgentPanel",
    "bindings": {
      "ctrl-alt-]": "workspace::ToggleRightDock",
      "ctrl-]": "agent::ToggleFocus"
    }
  },
  // {
  //   "context": "Editor && vim_mode == normal && !multibuffer"
  // },
  {
    "context": "Editor && vim_mode == normal && !multibuffer",
    "bindings": {
      "alt-right": "vim::ResizePaneRight",
      "alt-left": "vim::ResizePaneLeft",
      "alt-down": "vim::ResizePaneDown",
      "alt-up": "vim::ResizePaneUp",
      "ctrl-cmd-n": "vim::MaximizePane",
      "ctrl-cmd-m": "vim::ResetPaneSizes",
      "space shift-y": ["workspace::SendKeystrokes", "V \" + y"],
      ".": "vim::Repeat",
      "space h t": "zed::OpenTasks",
      "space m": "vim::ToggleMarksView",
      "space h p": "editor::ShowCharacterPalette",
      "space t l": "editor::ToggleRelativeLineNumbers",
      "g shift-e": "editor::OpenExcerptsSplit",
      // "g c c": "vim::ToggleComments",
      "space f g": ["task::Spawn", { "task_name": "FZFGitChanged" }],
      "space f a": [
        "task::Spawn",
        { "task_name": "FZFContent", "reveal_target": "center" }
      ],
      "space f i": ["task::Spawn", { "task_name": "FZFFiles" }],
      "space a a": [
        "task::Spawn",
        { "task_name": "Atac", "reveal_targer": "center" }
      ],
      "space g G": ["task::Spawn", { "task_name": "LazyGit" }],
      "space g g": [
        "task::Spawn",
        { "task_name": "LazyGit", "reveal_target": "center" }
      ],
      "space o l": [
        "workspace::SendKeystrokes",
        "v i w y o console.log(\"****: \",  ) ctrl-c F\" h h h p f, l l p"
      ],
      "space g T": [
        "workspace::SendKeystrokes",
        "ctrl-; cmd-shift-p workspace zoom enter ctrl-c lazygit enter"
      ],
      // "ctrl-,": [
      //   "workspace::SendKeystrokes",
      //   "cmd-shift-p toggle left dock enter"
      // ],
      "alt-j": "editor::MoveLineDown",
      "alt-k": "editor::MoveLineUp",
      "space l": "tab_switcher::Toggle",
      "ctrl-p": "projects::OpenRecent",
      "space w n": "workspace::NewWindow",
      "space s a": [
        "pane::DeploySearch",
        {
          "excluded_files": "**/build/**,**/dist/**,**/.next/**,vite.config.ts,package-lock.json"
        }
      ],
      "space s s": "buffer_search::Deploy",
      "space s f": "workspace::NewSearch",
      "space w q": "workspace::CloseWindow",
      "space z": "workspace::ToggleZoom",
      "ctrl-.": "workspace::ToggleZoom",
      "space g b": "git::Branch",
      "space g A": "git::StageFile",
      "space g a": "git::StageAll",
      "space g s": "git::ToggleStaged",
      "space g p": "git::Push",
      "space g r": "git::Restore",
      "space g f": "git_panel::ToggleFocus",
      "ctrl-\\": "git_panel::ToggleFocus",
      // "ctrl-alt-\\": ["git_panel::ToggleFocus", ""],
      "space g c": "git::ExpandCommitEditor",
      "space g C": "git::Commit",
      "space g d": "git::Diff",
      "space g ;": "git::Blame",
      "space g l": "editor::ToggleGitBlameInline",
      "space h i": "editor::ToggleInlayHints",
      // Not working. check it.
      "g h": "editor::ToggleSelectedDiffHunks",
      "g H": "editor::ExpandAllDiffHunks",
      "g a": "editor::ApplyDiffHunk",
      "g m": "git::Restore",
      "] g": "editor::GoToHunk",
      "[ g": "editor::GoToPreviousHunk",
      "space t t": "task::Spawn",
      "space t r": "task::Rerun",
      "space i": "file_finder::Toggle",
      "ctrl-'": "workspace::ToggleBottomDock",
      "space [": "workspace::ToggleLeftDock",
      "ctrl-alt-[": "workspace::ToggleLeftDock",
      "space ]": "pane::RevealInProjectPanel",
      "space u": "editor::GoToPreviousDiagnostic",
      "space d l": "editor::ToggleInlineDiagnostics",
      "space d d": "diagnostics::Deploy",
      "[ d": "editor::GoToPreviousDiagnostic",
      "] d": "editor::GoToDiagnostic",
      "space f f": "editor::Format",
      "space f o": "editor::OrganizeImports",
      "space f s": "workspace::SaveAll",
      "space f S": "workspace::Save",
      "space f n": "workspace::SaveWithoutFormat",
      "space f w": ["workspace::SendKeystrokes", "v i w g / enter"],
      "space a m": "markdown::OpenPreview",
      // "space a i": "assistant::ToggleFocus",
      "ctrl-]": "agent::ToggleFocus",
      // "cmd-'": "workspace::ToggleRightDock",
      "ctrl-alt-]": "workspace::ToggleRightDock",
      "space a j": "journal::NewJournalEntry",
      "space a l": "workspace::ToggleCenteredLayout",
      // "ctrl-]": "workspace::ToggleRightDock",
      "ctrl-[": "project_panel::ToggleFocus",
      "space a t": "workspace::NewTerminal",
      // "space tab": "pane::ActivatePrevItem",
      "space tab": "pane::AlternateFile",
      "space w v": "pane::SplitRight",
      "space w s": "pane::SplitDown",
      "space shift-q": "workspace::CloseWindow",
      "space w d": "pane::CloseAllItems",
      // actions
      "space c o": "editor::ToggleCodeActions",
      "space c m": "editor::OpenContextMenu",
      "space c r": "editor::Rename",
      "space s o": "outline::Toggle",
      "K": "editor::Hover",
      // buffers
      "space b k": "pane::CloseActiveItem",
      "space b o": "pane::CloseInactiveItems",
      "space b shift-o": "workspace::CloseInactiveTabsAndPanes",
      "] b": "pane::ActivateNextItem",
      "[ b": "pane::ActivatePreviousItem",
      "] w": "workspace::ActivateNextWindow",
      "[ w": "workspace::ActivatePreviousWindow",
      // terminal
      "ctrl-t": "workspace::NewCenterTerminal",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown",
      "ctrl-h": "workspace::ActivatePaneLeft",
      "space p": "command_palette::Toggle",
      "g r": "editor::FindAllReferences",
      "g o": "editor::GoToImplementation",
      "g O": "editor::GoToImplementationSplit",
      "g d": "editor::GoToDefinition",
      "g D": "editor::GoToDeclaration",
      "g V": "editor::GoToDefinitionSplit",
      "g y": "editor::GoToTypeDefinition",
      "g Y": "editor::GoToTypeDefinitionSplit"
    }
  },
  {
    "context": "GitPanel || AssistantPanel || AgentPanel",
    "bindings": {
      "ctrl-\\": "git_panel::ToggleFocus",
      // "ctrl-alt-\\": "git_panel::Close",
      "ctrl-alt-\\": "workspace::ToggleRightDock",
      "ctrl-alt-]": "workspace::ToggleRightDock"
    }
  },
  {
    "context": "GitPanel && ChangesList",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-a": "git_panel::ToggleFocus",
      "ctrl-\\": "git_panel::ToggleFocus",
      "ctrl-alt-\\": "workspace::ToggleRightDock"
    }
  },
  {
    "context": "Editor && (showing_code_actions || showing_completions)",
    "bindings": {
      "escape": "editor::ToggleCodeActions",
      "ctrl-e": "editor::ShowCompletions",
      "ctrl-k": "editor::ContextMenuPrevious",
      "ctrl-j": "editor::ContextMenuNext",
      "ctrl-p": "editor::ContextMenuPrevious",
      "ctrl-n": "editor::ContextMenuNext",
      "pageup": "editor::ContextMenuFirst",
      "pagedown": "editor::ContextMenuLast"
    }
  }
]
