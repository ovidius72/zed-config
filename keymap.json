[
  // {
  //   "context": "Workspace",
  //   "bindings": {}
  // },
  {
    // APPLY TO ALL CONTEXTS
    "bindings": {
      "ctrl-k": "menu::SelectPrev",
      "ctrl-j": "menu::SelectNext"
    }
  },
  {
    "context": "Editor && vim_mode == insert",
    "bindings": {
      "j j": "vim::NormalBefore",
      "ctrl-f": "editor::AcceptPartialCopilotSuggestion",
      "alt-ctrl-j": "editor::AddSelectionBelow",
      "alt-ctrl-k": "editor::AddSelectionAbove"
    }
  },
  {
    "context": "Terminal",
    "bindings": {
      "ctrl-;": "terminal_panel::ToggleFocus",
      "ctrl-'": "workspace::ToggleBottomDock",
      "ctrl-]": "workspace::ToggleRightDock",
      "ctrl-.": "workspace::ToggleZoom",
      "alt-q": "pane::CloseActiveItem"
      // "ctrl-/": ["workspace::SendKeystrokes", "alt-q ctrl-;"]
    }
  },
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "h": "project_panel::CollapseSelectedEntry",
      "space ]": "project_panel::ToggleFocus",
      "ctrl-l": "project_panel::ToggleFocus",
      "space [": "workspace::ToggleLeftDock",
      // "l": "project_panel::ExpandSelectedEntry",
      "ctrl-k": "editor::MoveUp",
      "ctrl-j": "editor::MoveDown",
      "l": "project_panel::Open",
      "escape": "project_panel::ToggleFocus",
      "enter": "project_panel::Open",
      "d": "project_panel::NewDirectory",
      "a": "project_panel::NewFile",
      "shift-r": "project_panel::Rename",
      // These operate differently (which is fine) than in vim in that "marking"
      // the "target" always comes last. So you would do "m m" to mark the file
      // you want to move, then "m t" again to mark the target directory.
      // Copying is the same, with "m c" to mark the file to copy, then "m t"
      // to mark the target directory.
      "m x": "project_panel::Cut",
      "m c": "project_panel::Copy",
      "m p": "project_panel::Paste",
      // Open in finder
      "o": "editor::RevealInFileManager",
      // Directory expansion
      // "l": "project_panel::ExpandSelectedEntry",
      // Move up and down
      // "j": "menu::SelectNext",
      // "k": "menu::SelectPrev",
      //////////////////////////////////////////////////////////
      // COMMANDS THAT ARE IN ZED, BUT DON'T WORK JUST RIGHT
      //////////////////////////////////////////////////////////
      // After deletion of the last file in a directory we should stay inside
      // the current directory, but instead it jumps to the root of the project.
      "shift-d": "project_panel::Delete",
      "r": "project_panel::Delete",
      // Works when the current selection in the project panel is a directory.
      // I think this should also work when the current selection is a file
      // on whichever directory that file is in.
      "/": "project_panel::NewSearchInDirectory",
      //////////////////////////////////////////////////////////
      // COMMANDS THAT ARE NOT IN ZED, BUT WISH THEY WERE
      //////////////////////////////////////////////////////////
      // Typically this is used to go up a directory. There is no command to
      // go up a directory in Zed though.
      // "-": "project_panel::GoUpOneDirectory",
      // This is not a thing in Zed at the moment. If it was it would display
      // the file preview in the current pane, but would keep the focus on the
      // project panel. Moving off that previewed file would close the preview.
      // "p": "project_panel::Preview",
      //////////////////////////////////////////////////////////
      // ZED-SPECIFIC COMMANDS
      //////////////////////////////////////////////////////////
      // In vim "q f" displays information on a file so tucking these under "q".
      // Perhaps a different command makes more sense though.
      "q p": "project_panel::CopyPath",
      "q r": "project_panel::CopyRelativePath"
    }
  },
  {
    "context": "Editor && vim_mode == visual && !VimWaiting && !VimObject",
    "bindings": {
      "shift-s": ["vim::PushOperator", { "AddSurrounds": {} }]
    }
  },
  {
    "context": "Editor && vim_mode == visual",
    "bindings": {
      // "g c": "vim::ToggleComments"
    }
  },
  {
    "context": "VimControl && !menu",
    "bindings": {
      "*": ["vim::MoveToNext", { "regex": true, "caseSensitive": true }],
      "#": ["vim::MoveToPrev", { "regex": true, "caseSensitive": true }]
    }
  },
  {
    "context": "Editor && vim_mode == normal",
    "bindings": {
      "ctrl f": "editor::ConfirmCompletion",
      ".": "vim::Repeat",
      "space h t": "zed::OpenTasks",
      "g shift-e": "editor::OpenExcerptsSplit",
      // "g c c": "vim::ToggleComments",
      "space f g": [
        "task::Spawn",
        {
          "task_name": "FZFGitChanged"
        }
      ],
      "space f a": [
        "task::Spawn",
        {
          "task_name": "FZFContent"
        }
      ],
      "space f i": [
        "task::Spawn",
        {
          "task_name": "FZFFiles"
        }
      ],
      "space g g": [
        "task::Spawn",
        {
          "task_name": "LazyGit"
        }
      ],
      "space o l": [
        "workspace::SendKeystrokes",
        "v i w y o console.log(\"****: \",  ) ctrl-c F\" h h h p f, l l p"
      ],
      "space g t": [
        "workspace::SendKeystrokes",
        "ctrl-; cmd-shift-p workspace zoom enter ctrl-c lazygit enter"
      ],
      "ctrl-,": [
        "workspace::SendKeystrokes",
        "cmd-shift-p toggle left dock enter"
      ],
      "alt-j": "editor::MoveLineDown",
      "alt-k": "editor::MoveLineUp",
      "space l": "tab_switcher::Toggle",
      "ctrl-p": "projects::OpenRecent",
      "space w n": "workspace::NewWindow",
      "space s a": "workspace::NewSearch",
      "space s f": "workspace::NewSearch",
      "space w q": "workspace::CloseWindow",
      "space z": "workspace::ToggleZoom",
      "ctrl-.": "workspace::ToggleZoom",
      "space g b": "branches::OpenRecent",
      "space g l": "editor::ToggleGitBlame",
      "g h": "editor::ToggleHunkDiff",
      "g m": "editor::RevertSelectedHunks",
      "] g": "editor::GoToHunk",
      "[ g": "editor::GoToPrevHunk",
      "space t t": "task::Spawn",
      "space i": "file_finder::Toggle",
      "ctrl-'": "workspace::ToggleBottomDock",
      "space [": "workspace::ToggleLeftDock",
      "space ]": "pane::RevealInProjectPanel",
      "[ d": "editor::GoToPrevDiagnostic",
      "] d": "editor::GoToDiagnostic",
      "space t d": "diagnostics::Deploy",
      "space f f": "editor::Format",
      // "space f o": "editor::OrganizeImports",
      "space f s": "workspace::SaveAll",
      "space f S": "workspace::SaveWithoutFormat",
      "space f w": ["workspace::SendKeystrokes", "v i w g / enter"],
      // "ctrl-/": ["workspace::SendKeystrokes", "alt-q ctrl-;"]
      // "space i": "file_finder::Toggle",
      "space a m": "markdown::OpenPreview",
      "space a j": "journal::NewJournalEntry",
      "space a l": "workspace::ToggleCenteredLayout",
      "ctrl-]": "workspace::ToggleRightDock",
      "space a t": "workspace::NewTerminal",
      // "space tab": "pane::ActivatePrevItem",
      "space tab": "pane::AlternateFile",
      "space w v": "pane::SplitRight",
      "space w s": "pane::SplitDown",
      "space shift-q": "workspace::CloseWindow",
      "space w d": "pane::CloseAllItems",
      // actions
      "space c o": "editor::ToggleCodeActions",
      "space c r": "editor::Rename",
      "space s s": "outline::Toggle",
      "K": "editor::Hover",
      // buffers
      "space b k": "pane::CloseActiveItem",
      "space b o": "pane::CloseInactiveItems",
      "space b shift-o": "workspace::CloseInactiveTabsAndPanes",
      // "] b": "pane::ActivateNextItem",
      // "[ b": "pane::ActivatePrevItem",
      "cmd-]": "pane::ActivateNextItem",
      "cmd-[": "pane::ActivatePrevItem",
      // terminal
      "ctrl-t": "workspace::NewCenterTerminal",
      "ctrl-;": "terminal_panel::ToggleFocus",
      "ctrl-l": ["workspace::ActivatePaneInDirection", "Right"],
      "ctrl-k": ["workspace::ActivatePaneInDirection", "Up"],
      "ctrl-j": ["workspace::ActivatePaneInDirection", "Down"],
      "ctrl-h": ["workspace::ActivatePaneInDirection", "Left"],
      "space p": "command_palette::Toggle",
      "g r": "editor::FindAllReferences",
      "g o": "editor::GoToImplementation",
      "g O": "editor::GoToImplementationSplit",
      "g d": "editor::GoToDefinition",
      "g D": "editor::GoToDeclaration",
      "g V": "editor::GoToDefinitionSplit",
      "g y": "editor::GoToTypeDefinition",
      "g Y": "editor::GoToTypeDefinitionSplit"
    }
  },
  {
    "context": "Editor && (showing_code_actions || showing_completions)",
    "bindings": {
      "escape": "editor::ToggleCodeActions",
      "ctrl-c": "editor::ToggleCodeActions",
      "ctrl-k": "editor::ContextMenuPrev",
      "ctrl-j": "editor::ContextMenuNext",
      "ctrl-p": "editor::ContextMenuPrev",
      "ctrl-n": "editor::ContextMenuNext",
      // "j": "editor::ContextMenuNext",
      // "k": "editor::ContextMenuPrev",
      "pageup": "editor::ContextMenuFirst",
      "pagedown": "editor::ContextMenuLast"
    }
  }
]
